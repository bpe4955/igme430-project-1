/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./client/client.js":
/*!**************************!*\
  !*** ./client/client.js ***!
  \**************************/
/***/ (() => {

eval("let userName = \"\";\r\nlet userColor = \"\";\r\nlet lastMessageTime = 0;\r\nlet messageRequestActive = false;\r\nlet chatFocused = false;\r\n\r\n\r\n//Handles our FETCH response. This function is async because it\r\n//contains an await.\r\nconst handleResponse = async (response, headRequest) => {\r\n\r\n  //Grab the content and chat section\r\n  const content = document.querySelector('#content');\r\n  const chatBox = document.querySelector('#chat');\r\n\r\n  //Code if there is no body\r\n  if (headRequest) { content.innerHTML += '<p>Meta Data Recieved</p>'; return; }\r\n  if(response.status === 204) { content.innerHTML = '<b>User Updated (No Content)</b>'; return; }\r\n\r\n  //Parse the response to json. This works because we know the server always sends back json. \r\n  //Await because .json() is an async function.\r\n  let obj = await response.json();\r\n  // If getting messages, show the messages in the chatbox\r\n  if (obj.messages) { \r\n    Object.keys(obj.messages).forEach(key => {\r\n      chatBox.innerHTML += `<div class=\"chat-message\">\r\n      <p class=\"user-name user-${obj.messages[key].color}\">${obj.messages[key].name}</p> \r\n      <p class=\"user-message message-${obj.messages[key].color}\">${obj.messages[key].message}</p>\r\n      </div>`;\r\n    });\r\n    // Auto-scroll chatbox to the bottom if the user isn't interacting with the chat\r\n    if(!chatFocused){\r\n      let chat = document.querySelector(\"#chat\");\r\n      chat.scrollTop = chat.scrollHeight;\r\n    }\r\n  }\r\n  // If getting messages, update the lastMessageTime variable\r\n  if (obj.time) { \r\n    lastMessageTime = obj.time; \r\n    // After getting new messages, make a new request for messages\r\n    return sendMessageGet();\r\n  }\r\n  \r\n  \r\n  //Based on the status code, display something\r\n  switch (response.status) {\r\n    case 200: //success\r\n      content.innerHTML = `<b>Success</b>`;\r\n      break;\r\n    case 201: //created\r\n      content.innerHTML = '<b>Created</b>';\r\n      break;\r\n    case 204: //updated (no response back from server)\r\n      content.innerHTML = '<b>Updated (No Content)</b>';\r\n      return;\r\n    case 400: //bad request\r\n      content.innerHTML = `<b>Bad Request</b>`;\r\n      break;\r\n    case 404: //not found\r\n      content.innerHTML = `<b>Not Found</b>`;\r\n      break;\r\n    default: //any other status code\r\n      content.innerHTML = `Error code not implemented by client.`;\r\n      break;\r\n  }\r\n\r\n  //If we have a message, display it.\r\n  if (obj.message) { content.innerHTML += `<p>Message: ${obj.message}</p>`; }\r\n  if (obj.id) { content.innerHTML += `<p>Id: ${obj.id}</p>`; }\r\n  // If getting users, show the users in content\r\n  if (obj.users) { content.innerHTML += `<p>${JSON.stringify(obj.users)}</p>`; }\r\n};\r\n\r\n// Sends the user data to the server\r\n// Uses fetch to send a postRequest. Marksed as async because we use await within it.\r\nconst sendUserPost = async (nameForm) => {\r\n  //Grab all the info from the form\r\n  const nameAction = nameForm.getAttribute('action');\r\n  const nameMethod = nameForm.getAttribute('method');\r\n\r\n  const nameField = nameForm.querySelector('#nameField');\r\n  const colorField = nameForm.querySelector('#colorField');\r\n\r\n  //Build a data string in the FORM-URLENCODED format.\r\n  const formData = `name=${nameField.value}&color=${colorField.value}`;\r\n\r\n  //Make a fetch request and await a response. Set the method to\r\n  //the one provided by the form (POST). Set the headers. Content-Type\r\n  //is the type of data we are sending. Accept is the data we would like\r\n  //in response. Then add our FORM-URLENCODED string as the body of the request. \r\n  let response = await fetch(nameAction, {\r\n    method: nameMethod,\r\n    headers: {\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n      'Accept': 'application/json',\r\n    },\r\n    body: formData,\r\n  });\r\n\r\n  // If the post was successful\r\n  if(response.status === 201 || response.status === 204){\r\n    document.querySelector(\"#chatbox\").style.visibility = \"visible\";\r\n    document.querySelector(\"#chat\").style.visibility = \"visible\";\r\n\r\n    userName = nameField.value;\r\n    userColor = colorField.value;\r\n\r\n    document.querySelector(\"#messageLabel\").classList = `user-name user-${userColor}`;\r\n    document.querySelector(\"#messageLabel\").innerHTML = userName;\r\n    document.querySelector(\"#messageField\").classList = `user-message message-${userColor}`;\r\n  }\r\n  //Once we have a response, handle it.\r\n  handleResponse(response);\r\n};\r\n\r\n// Sends the message data to the server\r\n// Uses fetch to send a postRequest. Marksed as async because we use await within it.\r\nconst sendMessagePost = async (messageForm) => {\r\n  //Grab all the info from the form\r\n  const messageAction = messageForm.getAttribute('action');\r\n  const messageMethod = messageForm.getAttribute('method');\r\n\r\n  //Build a data string in the FORM-URLENCODED format.\r\n  const formData = `name=${userName}&color=${userColor}&message=${messageForm.querySelector(\"#messageField\").value}`;\r\n\r\n  //Make a fetch request and await a response. Set the method to\r\n  //the one provided by the form (POST). Set the headers. Content-Type\r\n  //is the type of data we are sending. Accept is the data we would like\r\n  //in response. Then add our FORM-URLENCODED string as the body of the request.\r\n  let response = await fetch(messageAction, {\r\n    method: messageMethod,\r\n    headers: {\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n      'Accept': 'application/json',\r\n    },\r\n    body: formData,\r\n  });\r\n\r\n  //Clear message form if response went well\r\n  if(response.status === 201) { messageForm.querySelector(\"#messageField\").value = \"\"; }\r\n\r\n  //Once we have a response, handle it.\r\n  handleResponse(response); \r\n\r\n  \r\n};\r\n\r\n// Send a request to get users\r\n// Will likely be unneeded in the final version\r\nconst sendUserGet = async (userForm) => {\r\n  const actionField = userForm.querySelector('#urlField');\r\n  const methodField = userForm.querySelector('#methodSelect');\r\n  let response = await fetch(actionField.value, {\r\n    method: methodField.value,\r\n    headers: { 'Accept': 'application/json', },\r\n  });\r\n\r\n  handleResponse(response, methodField.value === 'head');\r\n}\r\n\r\n// Send a request to get messages\r\nconst sendMessageGet = async () => {\r\n  messageRequestActive = true;\r\n  let response = await fetch(`/getMessages?time=${lastMessageTime}`, {\r\n    method: 'get',\r\n    headers: { 'Accept': 'application/json', },\r\n  });\r\n\r\n  // If the request times out, send it again\r\n  if(response.status === 502){\r\n    return sendMessageGet();\r\n  }\r\n\r\n  handleResponse(response, false);\r\n}\r\n\r\n// Init function is called when window.onload runs (set below).\r\n// Set up connections and events\r\nconst init = () => {\r\n  // Create user form event\r\n  const nameForm = document.querySelector('#nameForm');\r\n  //Create an addUser function that cancels the forms default action and\r\n  //calls our sendPost function above.\r\n  const addUser = (e) => {\r\n    e.preventDefault();\r\n    if(!messageRequestActive) { sendMessageGet(); }\r\n    sendUserPost(nameForm);\r\n    return false;\r\n  }\r\n  //Call addUser when the submit event fires on the form.\r\n  nameForm.addEventListener('submit', addUser);\r\n\r\n  // Get user form event\r\n  // Connect the userForm similarly to the nameForm\r\n  // const userForm = document.querySelector('#userForm');\r\n  // const getUser = (e) => {\r\n  //   e.preventDefault();\r\n  //   sendUserGet(userForm);\r\n  //   return false;\r\n  // }\r\n  // userForm.addEventListener('submit', getUser);\r\n\r\n  // Post message form event\r\n  const mesageForm = document.querySelector('#chatBox');\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    sendMessagePost(mesageForm);\r\n    return false;\r\n  }\r\n  mesageForm.addEventListener('submit', sendMessage);\r\n\r\n  // Scrolling the chat messages\r\n  document.querySelector(\"#chat\").addEventListener('mouseenter', () => { chatFocused=true; });\r\n  document.querySelector(\"#chat\").addEventListener('mouseleave', () => { chatFocused=false; });\r\n\r\n};\r\n\r\n//When the window loads, run init.\r\nwindow.onload = init;\n\n//# sourceURL=webpack://igme430-project-1/./client/client.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./client/client.js"]();
/******/ 	
/******/ })()
;